#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headsep 0.5cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\size giant
Assignment 5: 
\begin_inset Newline linebreak
\end_inset

The Resistor Problem
\end_layout

\begin_layout Date

\size larger
March 26, 2021
\end_layout

\begin_layout Author

\size larger
Saurav Sachin Kale, EE19B141
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Aim
\end_layout

\begin_layout Itemize
To solve and visualize the potential distribution, current density field,
 and temperature profile of a thin 1cm x 1cm area copper plate with an electrode
 of given radius kept at 1V attached to the plate at its center.
 The bottom edge of this plate is grounded.
\end_layout

\begin_layout Itemize
Learn and implement one way of solving the Laplace Equation
\end_layout

\begin_layout Itemize
Assess the feasibility and efficiency of this method of solving Laplace
 Equation
\end_layout

\begin_layout Section
The Resistor Problem and its solution
\end_layout

\begin_layout Standard
The diagram below illustrates a thin 1cm x 1cm area copper plate with an
 electrode of given radius kept at 1V attached to the plate at its center.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Diagram.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The following equations must hold from our knowledge of electromagnetism:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\vec{j}=\sigma\vec{E}
\]

\end_inset


\end_layout

\begin_layout Standard
\align center
(Conductivity)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\vec{E}=-\nabla\phi
\]

\end_inset


\end_layout

\begin_layout Standard
\align center
(Electric field is gradient of potential)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\nabla\cdot\vec{j}=-\frac{\partial\rho}{\partial t}
\]

\end_inset


\end_layout

\begin_layout Standard
\align center
(Continuity Equation)
\end_layout

\begin_layout Standard
\noindent
\align left
Combining these three, we get the following equation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\nabla(-\sigma\nabla\phi)=-\frac{\partial\rho}{\partial t}
\]

\end_inset

Assuming constant conductivity we obtain:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\nabla^{2}\phi=\frac{1}{\sigma}\frac{\partial\rho}{\partial t}
\]

\end_inset

And for DC currents 
\begin_inset Formula $\frac{\partial\rho}{\partial t}=0$
\end_inset

, therefore:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\nabla^{2}\phi=0
\]

\end_inset

For our case, we are dealing with 2D distribution, so we can write 
\begin_inset Formula $\nabla^{2}\phi$
\end_inset

 as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial^{2}\phi}{\partial x^{2}}+\frac{\partial^{2}\phi}{\partial y^{2}}=0
\]

\end_inset


\end_layout

\begin_layout Section
Numerical Solution to Laplace equation
\end_layout

\begin_layout Standard
We now have this equation to solve in order to calculate our potential distribut
ion:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial^{2}\phi}{\partial x^{2}}+\frac{\partial^{2}\phi}{\partial y^{2}}=0
\end{equation}

\end_inset

We split the copper plate into discrete sections so the value of 
\begin_inset Formula $\phi$
\end_inset

 is available at points 
\begin_inset Formula $(x_{i},y_{j})$
\end_inset

 we can write:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial^{2}\phi}{\partial x^{2}}=\frac{\phi(x_{i+1},y_{j})+\phi(x_{i-1},y_{j})-2\phi(x_{i},y_{j})}{(\Delta x)^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial^{2}\phi}{\partial y^{2}}=\frac{\phi(x_{i},y_{j+1})+\phi(x_{i},y_{j-1})-2\phi(x_{i},y_{j})}{(\Delta y)^{2}}
\]

\end_inset

Replacing these in the equation (1) we get:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\phi_{i,j}=\frac{\phi_{i+1,j}+\phi_{i-1,j}+\phi_{i,j+1}+\phi_{i,j-1}}{4}
\end{equation}

\end_inset

Iterating equation (2) repeatedly over an initial distribution should give
 us the steady state values of 
\begin_inset Formula $\phi$
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The boundary conditions are these:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\phi=1V$
\end_inset

 at the electrode junction
\end_layout

\begin_layout Itemize
\begin_inset Formula $\phi=0V$
\end_inset

 at the bottom edge, where the plate has been grounded
\end_layout

\begin_layout Itemize
For the other edges, 
\begin_inset Formula $\frac{\partial\phi}{\partial n}=0$
\end_inset

.
 Where 
\begin_inset Formula $n$
\end_inset

 is the normal direction to the edge, because otherwise, currents would
 be flowing out of the plate into the surrounding, and that is not possible.
\end_layout

\begin_layout Standard
We shall ensure these are satisfied in every iteration.
\begin_inset Newline newline
\end_inset

We have thus found one way to solve the Laplace Equation.
\end_layout

\begin_layout Section
Procedure
\end_layout

\begin_layout Subsection
Defining the parameters
\end_layout

\begin_layout Itemize
\begin_inset Formula $N_{x},N_{y}$
\end_inset

: This represents the number of horizontal indices.
 Each discrete step is assumed to be of length 1 unit.
 The conversion between these units and the real life measurements is left
 to the user.
 A user may set a value of 
\begin_inset Formula $(25,25)$
\end_inset

 in order to divide a 1cm x 1cm plate into 25 x 25 discrete blocks.
 If the user wishes more fine divisions, 
\begin_inset Formula $(100,100)$
\end_inset

 or larger may be used.
 Setting 
\begin_inset Formula $N_{X}\neq N_{y}$
\end_inset

 creates a rectangular plate.
 Therefore by tweaking these parameters, a user can adjust any dimension
 rectangular plate to the desired level of detail.
 By default this is taken as 
\begin_inset Formula $(25,25)$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $R$
\end_inset

: Radius of the electrode in units.
 By default this is taken as 8 units.
\end_layout

\begin_layout Itemize
\begin_inset Formula $N_{iter}$
\end_inset

: The number of iterations for calculating the solution to the laplace equation.
 By default, 
\begin_inset Formula $N_{iter}=1500$
\end_inset

.
\end_layout

\begin_layout Standard
These parameters take their default values unless specified while calling
 the program as command line arguments.
 For the below analysis, default values have been used.
\end_layout

\begin_layout Subsection
Calculation of 
\begin_inset Formula $\phi$
\end_inset

 and the error
\end_layout

\begin_layout Standard
Initially, 
\begin_inset Formula $\phi$
\end_inset

 is initialized to being 1V where the electrode is in contact, that is in
 a circle of radius 
\begin_inset Formula $R$
\end_inset

 centered at the center of the plate.
 The red dots represent the electrode junction
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename InitPhi.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Contour plot of the initial value of 
\begin_inset Formula $\phi$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

We then obtain the steady state solution, and the error per iteration using
 the following algorithm:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout LyX-Code
do Niter times:
\end_layout

\begin_deeper
\begin_layout LyX-Code
#save phi
\end_layout

\begin_layout LyX-Code
oldphi = phi.copy()
\end_layout

\begin_layout LyX-Code
#update phi
\end_layout

\begin_layout LyX-Code
for each phi[i, j] in phi:
\end_layout

\begin_deeper
\begin_layout LyX-Code
phi[i, j] = (oldphi[i + 1, j] + oldphi[i - 1, j] + oldphi[i, j + 1] + oldphi[i,
 j - 1])/4
\end_layout

\end_deeper
\begin_layout LyX-Code
#boundary conditions
\end_layout

\begin_layout LyX-Code
phi[:, 0] = phi[:, 1]
\end_layout

\begin_layout LyX-Code
phi[:, Nx - 1] = phi[:, Nx - 2]
\end_layout

\begin_layout LyX-Code
phi[0, :] = phi[1, :]
\end_layout

\begin_layout LyX-Code
phi[Ny - 1, :] = 0
\end_layout

\begin_layout LyX-Code
phi[electrode_area] = 1
\end_layout

\begin_layout LyX-Code
errors.append(abs(phi-oldphi).max())
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Solve-Laplace
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The boundary conditions are implemented by ensuring that at every iteration,
 the electrode contact area is at 1V, and the bottom row is at 0V.
\begin_inset Newline newline
\end_inset

 We now make use of vectorized python notation in order to make our code
 more efficient.
 We can do the update phi part of the code with a single line instead of
 a loop as follows:
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "language=Python,basicstyle={\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout
\align center

phi[1:-1, 1:-1] = 0.25*(oldphi[2:, 1:-1] + oldphi[:-2, 1:-1] + oldphi[1:-1,
 2:] + oldphi[1:-1, :-2])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
And our boundary conditions are as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

#left edge
\end_layout

\begin_layout Plain Layout

phi[1:-1,0]=phi[1:-1,1]
\end_layout

\begin_layout Plain Layout

#right edge
\end_layout

\begin_layout Plain Layout

phi[1:-1,-1]=phi[1:-1,-2]
\end_layout

\begin_layout Plain Layout

#bottom edge
\end_layout

\begin_layout Plain Layout

phi[0, 1:-1]=0
\end_layout

\begin_layout Plain Layout

#top edge
\end_layout

\begin_layout Plain Layout

phi[-1, 1:-1]=phi[-2, 1:-1]
\end_layout

\begin_layout Plain Layout

# 4 corners get updated with the average of their neighboring values
\end_layout

\begin_layout Plain Layout

phi[0, 0] = 0.5*(phi[0, 1] + phi[1, 0])
\end_layout

\begin_layout Plain Layout

phi[0, -1] = 0.5*(phi[0, -2] + phi[1, -1])
\end_layout

\begin_layout Plain Layout

phi[-1, 0] = 0.5*(phi[-1, 1] + phi[-2, 0])
\end_layout

\begin_layout Plain Layout

phi[-1, -1] = 0.5*(phi[-1, -2] + phi[-2, -1])
\end_layout

\begin_layout Plain Layout

#restore the electrode portion
\end_layout

\begin_layout Plain Layout

phi[ii]=1.0
\end_layout

\begin_layout Plain Layout

#ii is the electrode area
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
After implementing this, we obtain the following plots:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename IterPhi.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Contour plot of the steady state value of 
\begin_inset Formula $\phi$
\end_inset

 (in V)calculated using Laplace equation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PhiSurfplot.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3D surface plot of the steady state value of 
\begin_inset Formula $\phi$
\end_inset

 (in V) calculated using Laplace equation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Now we have also calculated errors as a function of number of iterations.
 We now attempt to extract a fit for the semilogy plot of error vs.
 number of iterations like so:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y=Ae^{Bx}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
logy=logA+Bx
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
From our previous experience in curve fitting (Assignment 3), we will use
 the method of least squares to compute the values of 
\begin_inset Formula $logA$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 Our data is every 
\begin_inset Formula $50^{th}$
\end_inset

 datapoint of this graph.
 We represent this problem in matrix form like so:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left(\begin{array}{cc}
1 & x_{1}\\
1 & x_{2}\\
1 & x_{3}\\
... & ...\\
1 & x_{n}
\end{array}\right)\left(\begin{array}{c}
logA\\
B
\end{array}\right)=\left(\begin{array}{c}
logy_{1}\\
logy_{2}\\
logy_{3}\\
...\\
logy_{n}
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
M\cdot p=G
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
And we obtain 
\begin_inset Formula $p$
\end_inset

 using SciPy's lstsq() function:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

M = np.c_[np.ones(len(x_datapoints)), x_datapoints]
\end_layout

\begin_layout Plain Layout

p = scipy.linalg.lstsq(M, np.log(Y))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
For all the datapoints over all iterations, we get the fit:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
p=\left(\begin{array}{c}
-3.74206593\\
-0.0141953
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
For the datapoints beyond 500 iterations, we get the fit:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
p=\left(\begin{array}{c}
-3.73856391\\
-0.01419784
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
We now plot both of these fits along with the semilog plot:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ErrorSemiLogWithFitting.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Semilogy plot of errors vs.
 number of iterations, with fitted curves.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Plotting a loglog plot reveals that the curve is fairly linear till about
 500 iterations, but then it becomes exponential.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ErrorLogLog.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loglog plot of errors vs.
 number of iterations
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Assessing the performance of the Solve-Laplace Algorithm
\end_layout

\begin_layout Standard
We now analyse the feasibility and performance of this algorithm by plotting
 the maximum possible error obtained in the final plot as a function of
 
\begin_inset Formula $N_{iter}$
\end_inset

.
 
\begin_inset Newline newline
\end_inset

We notice that the error varies as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y=Ae^{Bx}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Error=\Sigma_{k=N+1}^{\infty}error_{k}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
An upper bound for this estimate is:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Error<\Sigma_{k=N+1}^{\infty}Ae^{Bk}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
since we are taking the absolute value sum.
\end_layout

\begin_layout Standard
\noindent
We can approximate this as continuum and therefore the summation tends to
 an integral:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Error<\int_{N+0.5}^{\infty}Ae^{Bk}dk
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Error<-\frac{A}{B}e^{B(N+0.5)}<\frac{A}{B}e^{B(N+0.5)}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
We take the following fit values:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
p=\left(\begin{array}{c}
-3.74206593\\
-0.0141953
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Varying 
\begin_inset Formula $N$
\end_inset

 in this expression, we obtain the following plot:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename AlgoPerformance.png

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Maximum cumulative error vs.
 
\begin_inset Formula $N_{iter}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
This algorithm is one of the worst ways to solve a Laplace equation, because
 the time constant is quite high.
 This means the error values take a lot of iterations to converge to a value
 close to zero.
\end_layout

\begin_layout Subsection
Current Density 
\begin_inset Formula $\vec{J}$
\end_inset


\end_layout

\begin_layout Standard
We know:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\vec{J}=-\sigma\nabla\phi
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Here we assume 
\begin_inset Formula $\sigma=1$
\end_inset

, and after simplification we obtain the following:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
J_{x}=-\frac{\partial\phi}{\partial x}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
J_{y}=-\frac{\partial\phi}{\partial y}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Converting to difference equations we get:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
J_{x,ij}=\frac{1}{2}(\phi_{i,j-1}-\phi_{i,j+1})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
J_{y,ij}=\frac{1}{2}(\phi_{i-1,j}-\phi_{i+1,j})
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
The python code for calculating these values is:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

Jx = 0.5*(phi[1:-1,0:-2]-phi[1:-1,2:])
\end_layout

\begin_layout Plain Layout

Jy = 0.5*(-phi[2:, 1:-1]+phi[0:-2,1:-1])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
We plot 
\begin_inset Formula $\vec{J}$
\end_inset

 using the quiver function:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

plt.quiver(Y[1:-1, 1:-1], X[1:-1, 1:-1], Jy, Jx, scale=4, label="$
\backslash

\backslash
vec{J}$")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The following is the result.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename VectorJPlot.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Plot of the vector field 
\begin_inset Formula $\vec{J}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Most of the current seems to flow through the bottom half of the plate.
 Hardly any current flows from the top part of the wire.
 This is because as we saw in the potential contour plot, the value of 
\begin_inset Formula $\phi$
\end_inset

 is almost constant and equal to 1V in the top part.
 This means 
\begin_inset Formula $\vec{J}=-\sigma\nabla\phi\approx0$
\end_inset

.
 Hence hardly any current flows from the top part of the wire.
\end_layout

\begin_layout Subsection
Temperature distribution across the plate
\end_layout

\begin_layout Standard
We now attempt to calculate and visualize the temperature distribution across
 the copper plate.
 We do this by writing the heat equation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
-\nabla\cdot(\kappa\nabla T)=\frac{1}{\sigma}|\vec{J}|^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Assuming constant 
\begin_inset Formula $\kappa,\sigma$
\end_inset

 we get:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\nabla^{2}T=-\frac{1}{\sigma\kappa}|\vec{J}|^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial^{2}T}{\partial x^{2}}+\frac{\partial^{2}T}{\partial y^{2}}=-\frac{1}{\sigma\kappa}|\vec{J}|^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Converting to difference equations, we get the following:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{T_{i+1,j}+T_{i-1,j}-2T_{i,j}}{(\Delta x)^{2}}+\frac{T_{i,j+1}+T_{i,j-1}-2T_{i,j}}{(\Delta y)^{2}}=-\frac{1}{\sigma\kappa}|\vec{J}|^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
We assumed in Section 4.1 that 
\begin_inset Formula $\Delta x=\Delta y=\Delta n=1unit$
\end_inset

.
 Rearranging, we obtain:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
T_{i+1,j}+T_{i-1,j}+T_{i,j+1}+T_{i,j-1}-4T_{i,j}=-\frac{1}{\sigma\kappa}|\vec{J}|^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
T_{i,j}=\frac{T_{i+1,j}+T_{i-1,j}+T_{i,j+1}+T_{i,j-1}}{4}+\frac{1}{4\sigma\kappa}|\vec{J}|^{2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
Since 
\begin_inset Formula $\kappa,\sigma$
\end_inset

 are scaling constants, we ignore their effect for now by setting 
\begin_inset Formula $\kappa\sigma=1$
\end_inset

.
 
\begin_inset Newline newline
\end_inset

The general profile of the temperature plot will not be affected by this.
 We initialize the entire plate at room temperature (300K).
\begin_inset Newline newline
\end_inset

Our boundary conditions are
\end_layout

\begin_layout Itemize
Electrode contact area remains at 300K
\end_layout

\begin_layout Itemize
Bottom edge (grounded edge) remains at 300K
\end_layout

\begin_layout Standard
\noindent
Applying a slightly modified version of Solve-Laplace:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout LyX-Code
do Niter times:
\end_layout

\begin_deeper
\begin_layout LyX-Code
#save temp
\end_layout

\begin_layout LyX-Code
oldtemp = temp.copy()
\end_layout

\begin_layout LyX-Code
#update temp
\end_layout

\begin_layout LyX-Code
for each temp[i, j] in temp:
\end_layout

\begin_deeper
\begin_layout LyX-Code
temp[i, j] = (oldtemp[i + 1, j] + oldtemp[i - 1, j] + oldtemp[i, j + 1]
 + oldtemp[i, j - 1]
\end_layout

\begin_layout LyX-Code
+ Jx*Jx + Jy*Jy)/4
\end_layout

\end_deeper
\begin_layout LyX-Code
#boundary conditions
\end_layout

\begin_layout LyX-Code
temp[:, 0] = temp[:, 1]
\end_layout

\begin_layout LyX-Code
temp[:, Nx - 1] = temp[:, Nx - 2]
\end_layout

\begin_layout LyX-Code
temp[0, :] = temp[1, :]
\end_layout

\begin_layout LyX-Code
temp[Ny - 1, :] = 300
\end_layout

\begin_layout LyX-Code
temp[electrode_area] = 300
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Solve-Temp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
We now obtain the following plot:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Temps.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Contour plot of the temperature distribution across the copper plate (in
 K)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
As expected, the areas with high current density are hotter.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Itemize
A copper square plate with cylinderical electrode was modelled and its potential
 distribution, current density and temperature distribution was calculated
 and visualized.
\end_layout

\begin_layout Itemize
Most of the current propagates in the lower part of the plate, since the
 potential gradient is near zero at the upper part of the plate.
\end_layout

\begin_layout Itemize
For the same reason, the temperatures are higher in the lower part of the
 plate.
\end_layout

\begin_layout Itemize
The Solve-Laplace algorithm was analysed, and is one of the most inefficient
 ways of solving the Laplace equation.
\end_layout

\end_body
\end_document
